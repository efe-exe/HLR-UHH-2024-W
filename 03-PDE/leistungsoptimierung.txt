nayci1@cluster:~/03-PDE/pde$ ./partdiff-seq 1 2 64 1 2 9000

============================================================
Program for calculation of partial differential equations.
============================================================
(c) Dr. Thomas Ludwig, TU München.
    Thomas A. Zochler, TU München.
    Andreas C. Schmidt, TU München.
============================================================
Berechnungszeit:    176.667893 s 
Berechnungsmethode: Jacobi
Interlines:         64
Stoerfunktion:      f(x,y)=0
Terminierung:       Anzahl der Iterationen
Anzahl Iterationen: 9000
Norm des Fehlers:   7.18564288423e-05
Matrix:
 2.00000000 1.87500000 1.75000000 1.62500000 1.50000000 1.37500000 1.25000000 1.12500000 1.00000000
 1.87500000 1.02596259 0.64569791 0.54485593 0.49905212 0.45927576 0.44427572 0.55455346 0.87500000
 1.75000000 0.64569791 0.17868754 0.09153819 0.07920252 0.07492213 0.10250274 0.29114601 0.75000000
 1.62500000 0.54485593 0.09153819 0.01183816 0.00571371 0.00728964 0.03726858 0.21075395 0.62500000
 1.50000000 0.49905212 0.07920252 0.00571371 0.00042471 0.00201245 0.02647164 0.16638610 0.50000000
 1.37500000 0.45927576 0.07492213 0.00728964 0.00201245 0.00274112 0.02065252 0.12517377 0.37500000
 1.25000000 0.44427572 0.10250274 0.03726858 0.02647164 0.02065252 0.02631794 0.08972382 0.25000000
 1.12500000 0.55455346 0.29114601 0.21075395 0.16638610 0.12517377 0.08972382 0.08314433 0.12500000
 1.00000000 0.87500000 0.75000000 0.62500000 0.50000000 0.37500000 0.25000000 0.12500000 0.00000000
nayci1@cluster:~/03-PDE/pde$ ./partdiff-seq 1 2 64 2 2 4000

============================================================
Program for calculation of partial differential equations.
============================================================
(c) Dr. Thomas Ludwig, TU München.
    Thomas A. Zochler, TU München.
    Andreas C. Schmidt, TU München.
============================================================
Berechnungszeit:    134.070426 s 
Berechnungsmethode: Jacobi
Interlines:         64
Stoerfunktion:      f(x,y)=2pi^2*sin(pi*x)sin(pi*y)
Terminierung:       Anzahl der Iterationen
Anzahl Iterationen: 4000
Norm des Fehlers:   1.69655242762e-05
Matrix:
 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000
 0.00000000 0.01030982 0.01905006 0.02489010 0.02694085 0.02489010 0.01905006 0.01030982 0.00000000
 0.00000000 0.01905006 0.03519991 0.04599090 0.04978020 0.04599090 0.03519991 0.01905006 0.00000000
 0.00000000 0.02489010 0.04599090 0.06009001 0.06504096 0.06009001 0.04599090 0.02489010 0.00000000
 0.00000000 0.02694085 0.04978020 0.06504096 0.07039983 0.06504096 0.04978020 0.02694085 0.00000000
 0.00000000 0.02489010 0.04599090 0.06009001 0.06504096 0.06009001 0.04599090 0.02489010 0.00000000
 0.00000000 0.01905006 0.03519991 0.04599090 0.04978020 0.04599090 0.03519991 0.01905006 0.00000000
 0.00000000 0.01030982 0.01905006 0.02489010 0.02694085 0.02489010 0.01905006 0.01030982 0.00000000
 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000
nayci1@cluster:~/03-PDE/pde$ gprof ./partdiff-seq
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls   s/call   s/call  name
 78.93     57.67    57.67        1    57.67    72.68  calculate
 20.54     72.68    15.01 1077444000     0.00     0.00  getResiduum
  0.47     73.02     0.34        1     0.34     0.34  initMatrices
  0.00     73.02     0.00        4     0.00     0.00  allocateMemory
  0.00     73.02     0.00        1     0.00     0.00  AskParams
  0.00     73.02     0.00        1     0.00     0.00  DisplayMatrix
  0.00     73.02     0.00        1     0.00     0.00  allocateMatrices
  0.00     73.02     0.00        1     0.00     0.00  displayStatistics
  0.00     73.02     0.00        1     0.00     0.00  freeMatrices
  0.00     73.02     0.00        1     0.00     0.00  initVariables

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
           else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
           function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
           the function in the gprof listing. If the index is
           in parenthesis it shows where it would appear in
           the gprof listing if it were to be printed.


Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.


                     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.01% of 73.02 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00   73.02                 main [1]
               57.67   15.01       1/1           calculate [2]
                0.34    0.00       1/1           initMatrices [4]
                0.00    0.00       1/1           AskParams [6]
                0.00    0.00       1/1           initVariables [11]
                0.00    0.00       1/1           allocateMatrices [8]
                0.00    0.00       1/1           displayStatistics [9]
                0.00    0.00       1/1           DisplayMatrix [7]
                0.00    0.00       1/1           freeMatrices [10]
-----------------------------------------------
               57.67   15.01       1/1           main [1]
[2]     99.5   57.67   15.01       1         calculate [2]
               15.01    0.00 1077444000/1077444000     getResiduum [3]
-----------------------------------------------
               15.01    0.00 1077444000/1077444000     calculate [2]
[3]     20.6   15.01    0.00 1077444000         getResiduum [3]
-----------------------------------------------
                0.34    0.00       1/1           main [1]
[4]      0.5    0.34    0.00       1         initMatrices [4]
-----------------------------------------------
                0.00    0.00       4/4           allocateMatrices [8]
[5]      0.0    0.00    0.00       4         allocateMemory [5]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[6]      0.0    0.00    0.00       1         AskParams [6]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[7]      0.0    0.00    0.00       1         DisplayMatrix [7]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[8]      0.0    0.00    0.00       1         allocateMatrices [8]
                0.00    0.00       4/4           allocateMemory [5]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[9]      0.0    0.00    0.00       1         displayStatistics [9]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[10]     0.0    0.00    0.00       1         freeMatrices [10]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[11]     0.0    0.00    0.00       1         initVariables [11]
-----------------------------------------------
[...]

-----------------------------------------------
Unternommene Aenderung: Calculate Update
-----------------------------------------------

static void calculate(struct calculation_arguments *arguments,
                      struct calculation_results *results,
                      struct options *options) {
  int i, j;    /* local variables for loops  */
  int m1, m2;  /* used as indices for old and new matrices       */
  double star; /* four times center value minus 4 neigh.b values */
  double korrektur;
  double residuum; /* residuum of current iteration                  */
  double maxresiduum; /* maximum residuum */ /*AENDERUNG*/

  int N = arguments->N;
  double ***Matrix = arguments->Matrix;

  /* initialize m1 and m2 depending on algorithm */
  if (options->method == METH_GAUSS_SEIDEL) {
    m1 = 0;
    m2 = 0;
  } else {
    m1 = 0;
    m2 = 1;
  }

  while (options->term_iteration > 0) {
	maxresiduum = 0; /*AENDERUNG*/

	/* over all rows */
	for (i = 1; i < N; i++) {
	  // Cache Matrices to improve cache performance 
      double* m1cache = Matrix[m1][i];
      double* m2cache = Matrix[m2][i];

	  /* over all columns */
	  for (j = 1; j < N; j++) {
				// star = -Matrix[m2][i-1][j] - Matrix[m2][i][j-1] - Matrix[m2][i][j+1] - Matrix[m2][i+1][j] + 4.0 * Matrix[m2][i][j];
		star = -(m2cache - 1)[j] - m2cache[j-1] - m2cache[j+1] - (m2cache + 1)[j] + 4.0 * m2cache[j];

		// Not performence optimised code
		// residuum = getResiduum(arguments, options, i, j, star);

		//
		// getResiduum
		//
		if (options->inf_func == FUNC_F0)
		{
			residuum = ((-star) / 4.0);
		}
		else
		{
          // TODO: Optimize this function (Pre. calc.)
	  	  residuum = ((TWO_PI_SQUARE
		  * sin((double)(j) * PI * arguments->h)
		  * sin((double)(i) * PI * arguments->h)
		  * arguments->h * arguments->h - star)/ 4.0); /*AENDERUNG*/
		}

		//residuum = getResiduum(arguments, options, i, j, star); /*AENDERUNG*/
		korrektur = residuum;
		residuum = (residuum < 0) ? -residuum : residuum;
		maxresiduum = (residuum < maxresiduum) ? maxresiduum : residuum;

		// Matrix[m1][i][j] = Matrix[m2][i][j] + korrektur;
		m1cache[j] = m2cache[j] + korrektur; /*AENDERUNG*/
	  }
	}

	results->stat_iteration++;
	results->stat_precision = maxresiduum; /*AENDERUNG*/

    /* exchange m1 and m2 */
    i = m1;
    m1 = m2;
    m2 = i;
    /* check for stopping calculation, depending on termination method */
    if (options->termination == TERM_PREC) {
	  if (maxresiduum < options->term_precision) { /*AENDERUNG*/ //if (results->stat_precision < options->term_precision) {
		options->term_iteration = 0;
	  }
    } else if (options->termination == TERM_ITER) {
      options->term_iteration--;
    }
  }

  results->m = m2;

}

-----------------------------------------------
Ergebnis des Updates
-----------------------------------------------

nayci1@cluster:~/03-PDE/pde$ ./partdiff-seq 1 2 64 1 2 9000

============================================================
Program for calculation of partial differential equations.
============================================================
(c) Dr. Thomas Ludwig, TU München.
    Thomas A. Zochler, TU München.
    Andreas C. Schmidt, TU München.
============================================================
Berechnungszeit:    38.166399 s 
Berechnungsmethode: Jacobi
Interlines:         64
Stoerfunktion:      f(x,y)=0
Terminierung:       Anzahl der Iterationen
Anzahl Iterationen: 9000
Norm des Fehlers:   1.07448599870e-04
Matrix:
 2.00000000 1.87500000 1.75000000 1.62500000 1.50000000 1.37500000 1.25000000 1.12500000 1.00000000
 1.87500000 0.92483576 0.31992294 0.07521075 0.01686221 0.03599627 0.14935507 0.43159238 0.87500000
 1.75000000 0.86317993 0.29859212 0.07015588 0.01532928 0.03094141 0.12802425 0.36993656 0.75000000
 1.62500000 0.80152411 0.27726131 0.06510102 0.01379635 0.02588654 0.10669343 0.30828073 0.62500000
 1.50000000 0.73986828 0.25593049 0.06004615 0.01226342 0.02083168 0.08536261 0.24662491 0.50000000
 1.37500000 0.67821246 0.23459967 0.05499129 0.01073049 0.01577682 0.06403179 0.18496908 0.37500000
 1.25000000 0.61655663 0.21326885 0.04993643 0.00919757 0.01072195 0.04270097 0.12331326 0.25000000
 1.12500000 0.55490081 0.19193803 0.04488156 0.00766464 0.00566709 0.02137016 0.06165743 0.12500000
 1.00000000 0.87500000 0.75000000 0.62500000 0.50000000 0.37500000 0.25000000 0.12500000 0.00000000
nayci1@cluster:~/03-PDE/pde$ ./partdiff-seq 1 2 64 2 2 4000

============================================================
Program for calculation of partial differential equations.
============================================================
(c) Dr. Thomas Ludwig, TU München.
    Thomas A. Zochler, TU München.
    Andreas C. Schmidt, TU München.
============================================================
Berechnungszeit:    69.270957 s 
Berechnungsmethode: Jacobi
Interlines:         64
Stoerfunktion:      f(x,y)=2pi^2*sin(pi*x)sin(pi*y)
Terminierung:       Anzahl der Iterationen
Anzahl Iterationen: 4000
Norm des Fehlers:   1.69655242760e-05
Matrix:
 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000
 0.00000000 0.01030982 0.01905006 0.02489010 0.02694085 0.02489010 0.01905006 0.01030982 0.00000000
 0.00000000 0.01905006 0.03519991 0.04599090 0.04978020 0.04599090 0.03519991 0.01905006 0.00000000
 0.00000000 0.02489010 0.04599090 0.06009001 0.06504096 0.06009001 0.04599090 0.02489010 0.00000000
 0.00000000 0.02694085 0.04978020 0.06504096 0.07039983 0.06504096 0.04978020 0.02694085 0.00000000
 0.00000000 0.02489010 0.04599090 0.06009001 0.06504096 0.06009001 0.04599090 0.02489010 0.00000000
 0.00000000 0.01905006 0.03519991 0.04599090 0.04978020 0.04599090 0.03519991 0.01905006 0.00000000
 0.00000000 0.01030982 0.01905006 0.02489010 0.02694085 0.02489010 0.01905006 0.01030982 0.00000000
 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000

 -----------------------------------------------
Halbierung der Zeit erfolgt, Stopp der Aufgabe, Perf war kaputt ->
-----------------------------------------------

nayci1@cluster:~/03-PDE/pde$ salloc -p west --nodes=1 --ntasks=1 --time=00:03:00
salloc: Granted job allocation 176251
nayci1@cluster:~/03-PDE/pde$ srun perf record -g -e stalled-cycles-frontend ./patdiff-seq 1 2 64 1 2 100
WARNING: Kernel address maps (/proc/{kallsyms,modules}) are restricted,
check /proc/sys/kernel/kptr_restrict and /proc/sys/kernel/perf_event_paranoid.

Samples in kernel functions may not be resolved if a suitable vmlinux
file is not found in the buildid cache or in the vmlinux path.

Samples in kernel modules won't be resolved at all.

If some relocation was applied (e.g. kexec) symbols may be misresolved
even with a suitable vmlinux or kallsyms file.

PERFILE2@8pg7a !"#$%&'()*+,-./0123PT@west8PT@5.4.0-135-genericPT@5.4.212PT@x86_64PP@Intel(R) Xeon(R) CPU X5650 @ 2.67GHzPT     @GenuineIntel,6,44,2P
@0-5,12-17@6-11,18-23
                     @0,12@1,13@2,14@3,15@4,16@5,17@6,18@7,19@8,20@9,21@10,22@11,23ff-seq@1@2@64@1@2@100P
                                                                                                         ppg7a@stalled-cycles-frontend !"#$%&'()*+,-./0123P|
   

   
@0-5,12-17@6-11,18-23PP]L@0-5,12-17]N@6-11,18-23P
@software      @uncore@uprobe@cpu
Couldn't record kernel reference relocation symbol
Symbol resolution may be skewed if relocation was used (e.g. kexec).
Check /proc/kallsyms permission or run as root.
Workload failed: No such file or directory
@cstate_core@breakpoint@tracepoint
                                  @cstate_pkg@kprob@msrP Pp88hhPPPO /L3QhN0stalled-cycles-frontendI(ѼJ 0ѼѼperfsrun: error: west8: task 0: Exited with exit code 255
nayci1@cluster:~/03-PDE/pde$ 